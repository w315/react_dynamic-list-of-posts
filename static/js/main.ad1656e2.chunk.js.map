{"version":3,"sources":["components/Context/Context.tsx","utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["UserContext","createContext","undefined","Error","UserProvider","children","useState","users","setUsers","userSelected","setUserSelected","posts","setPosts","postSelected","setPostSelected","comments","setComments","commentToDelete","setCommentToDelete","showUsers","setShowUsers","errorPosts","setErrorPosts","errorUsers","setErrorUsers","errorComments","setErrorComments","isLoadingPosts","setIsLoadingPosts","isLoadingComments","setIsLoadingComments","isLoadingCommentSending","setIsLoadingCommentSending","values","showForm","setShowForm","Provider","value","useUserContext","context","useContext","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","useEffect","id","catch","finally","length","className","map","post","title","type","classNames","onClick","postSelectionToggle","Loader","NewCommentForm","nameError","setNameError","emailError","setEmailError","messageError","setMassageError","name","email","postId","formData","setFormData","handleInputChange","e","target","prevState","onSubmit","event","preventDefault","hasErrors","trim","newComment","prevComments","htmlFor","placeholder","onChange","PostDetails","comment","href","newComments","filter","currComment","handleDeleteComment","UserSelector","dropdownRef","useRef","dropdownValue","setDropdownValue","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","selectUser","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad1656e2.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useState,\n  ReactNode,\n  useContext,\n} from 'react';\nimport { User } from '../../types/User';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ninterface ValuesTypes {\n  users: User[] | null;\n  setUsers: React.Dispatch<React.SetStateAction<User[] | null>>;\n  showUsers: boolean;\n  setShowUsers: React.Dispatch<React.SetStateAction<boolean>>;\n  userSelected: User | null;\n  setUserSelected: React.Dispatch<React.SetStateAction<User | null>>;\n  errorPosts: string;\n  setErrorPosts: React.Dispatch<React.SetStateAction<string>>;\n  isLoadingPosts: boolean;\n  setIsLoadingPosts: React.Dispatch<React.SetStateAction<boolean>>;\n  posts: Post[] | null;\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>;\n  postSelected: Post | null;\n  setPostSelected: React.Dispatch<React.SetStateAction<Post | null>>;\n  errorUsers: string;\n  setErrorUsers: React.Dispatch<React.SetStateAction<string>>;\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  errorComments: string;\n  setErrorComments: React.Dispatch<React.SetStateAction<string>>;\n  isLoadingComments: boolean;\n  setIsLoadingComments: React.Dispatch<React.SetStateAction<boolean>>;\n  commentToDelete: Comment | null;\n  setCommentToDelete: React.Dispatch<React.SetStateAction<Comment | null>>;\n  showForm: boolean;\n  setShowForm: React.Dispatch<React.SetStateAction<boolean>>;\n  isLoadingCommentSending: boolean;\n  setIsLoadingCommentSending: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst UserContext = createContext<ValuesTypes | undefined>(undefined);\n\nif (!UserContext) {\n  throw new Error('useUser must be used within a UserProvider');\n}\n\n// eslint-disable-next-line max-len\nexport const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [userSelected, setUserSelected] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postSelected, setPostSelected] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentToDelete, setCommentToDelete] = useState<Comment | null>(null);\n\n  const [showUsers, setShowUsers] = useState<boolean>(false);\n\n  const [errorPosts, setErrorPosts] = useState<string>('');\n  const [errorUsers, setErrorUsers] = useState<string>('');\n  const [errorComments, setErrorComments] = useState<string>('');\n\n  const [isLoadingPosts, setIsLoadingPosts] = useState<boolean>(false);\n  const [isLoadingComments, setIsLoadingComments] = useState<boolean>(false);\n  const [\n    isLoadingCommentSending,\n    setIsLoadingCommentSending,\n  ] = useState<boolean>(false);\n\n  const [showForm, setShowForm] = useState<boolean>(false);\n\n  const values: ValuesTypes = {\n    users,\n    setUsers,\n    showUsers,\n    setShowUsers,\n    userSelected,\n    setUserSelected,\n    errorPosts,\n    setErrorPosts,\n    isLoadingPosts,\n    setIsLoadingPosts,\n    posts,\n    setPosts,\n    postSelected,\n    setPostSelected,\n    errorUsers,\n    setErrorUsers,\n    comments,\n    setComments,\n    errorComments,\n    setErrorComments,\n    isLoadingComments,\n    setIsLoadingComments,\n    commentToDelete,\n    setCommentToDelete,\n    showForm,\n    setShowForm,\n    isLoadingCommentSending,\n    setIsLoadingCommentSending,\n  };\n\n  return (\n    <UserContext.Provider value={values}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUserContext = (): ValuesTypes => {\n  const context = useContext(UserContext);\n\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n\n  return context;\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useUserContext } from './Context/Context';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    setPosts,\n    setErrorPosts,\n    userSelected,\n    setIsLoadingPosts,\n    setPostSelected,\n    postSelected,\n  } = useUserContext();\n\n  const postSelectionToggle = (post: Post) => {\n    if (postSelected?.id === post.id) {\n      setPostSelected(null);\n    } else {\n      setPostSelected(post);\n    }\n  };\n\n  useEffect(() => {\n    if (userSelected) {\n      setIsLoadingPosts(true);\n      setPosts([]);\n      setPostSelected(null);\n      client.get(`/posts?userId=${userSelected?.id}`)\n        .then((response: unknown) => {\n          setPosts(response as Post[]);\n        })\n        .catch(() => {\n          setErrorPosts('Error loading posts');\n        })\n        .finally(() => {\n          setIsLoadingPosts(false);\n        });\n    }\n  }, [userSelected]);\n\n  return (\n    <>\n      {(!!posts?.length && userSelected) && (\n        <div data-cy=\"PostsList\">\n          <p className=\"title\">Posts:</p>\n\n          <table\n            className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n          >\n            <thead>\n              <tr className=\"has-background-link-light\">\n                <th>#</th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {posts?.map(post => (\n                <tr data-cy=\"Post\" key={post.id}>\n                  <td data-cy=\"PostId\">\n                    {post.id}\n                  </td>\n\n                  <td data-cy=\"PostTitle\">\n                    {post.title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames(\n                        'button',\n                        'is-link',\n                        {\n                          'is-light': post.id !== postSelected?.id,\n                        },\n                      )}\n                      onClick={() => postSelectionToggle(post)}\n                    >\n                      Open\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { useUserContext } from './Context/Context';\nimport { User } from '../types/User';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    comments,\n    setUsers,\n    setComments,\n    postSelected,\n    isLoadingCommentSending,\n    setIsLoadingCommentSending,\n  } = useUserContext();\n\n  const [nameError, setNameError] = useState<boolean>(false);\n  const [emailError, setEmailError] = useState<boolean>(false);\n  const [messageError, setMassageError] = useState<boolean>(false);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    body: '',\n    postId: postSelected?.id,\n  });\n\n  const handleInputChange = (e: React\n    .ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setNameError(false);\n\n        break;\n\n      case 'email':\n        setEmailError(false);\n\n        break;\n\n      case 'body':\n        setMassageError(false);\n\n        break;\n\n      default:\n        break;\n    }\n\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsLoadingCommentSending(true);\n\n    const { name, email, body } = formData;\n\n    let hasErrors = false;\n\n    if (!name.trim() || !name) {\n      setNameError(true);\n      hasErrors = true;\n    }\n\n    if (!email.trim() || !email) {\n      setEmailError(true);\n      hasErrors = true;\n    }\n\n    if (!body.trim() || !body) {\n      setMassageError(true);\n      hasErrors = true;\n    }\n\n    if (hasErrors) {\n      setIsLoadingCommentSending(false);\n\n      return;\n    }\n\n    if (!nameError && !emailError && !messageError) {\n      const postId = postSelected?.id;\n\n      if (postId) {\n        const newComment = {\n          id: comments.length + 1,\n          postId,\n          name,\n          email,\n          body,\n        };\n\n        client.post<Comment[]>('/comments', newComment)\n          .then(() => {\n            setComments(prevComments => [...prevComments, newComment]);\n          });\n      }\n\n      client.post<User[] | null>('/users', { name, email })\n        .then((response: User[] | null) => {\n          if (response) {\n            setUsers(response);\n          }\n        })\n        .finally(() => {\n          setFormData({\n            name: '',\n            email: '',\n            body: '',\n            postId: postSelected?.id,\n          });\n\n          setIsLoadingCommentSending(false);\n        });\n    }\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      body: '',\n      postId: postSelected?.id,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={formData.name}\n            onChange={handleInputChange}\n            className={classNames(\n              'input',\n              {\n                'is-danger': nameError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={formData.email}\n            onChange={handleInputChange}\n            className={classNames(\n              'input',\n              {\n                'is-danger': emailError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            onChange={handleInputChange}\n            value={formData.body}\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': messageError,\n              },\n            )}\n          />\n        </div>\n\n        {messageError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoadingCommentSending,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { useUserContext } from './Context/Context';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    postSelected,\n    setComments,\n    errorComments,\n    setErrorComments,\n    isLoadingComments,\n    setIsLoadingComments,\n    comments,\n    commentToDelete,\n    setCommentToDelete,\n    showForm,\n    setShowForm,\n  } = useUserContext();\n\n  const handlerFormOpener = () => {\n    setShowForm(true);\n  };\n\n  useEffect(() => {\n    if (postSelected) {\n      setIsLoadingComments(true);\n      setShowForm(false);\n      client.get(`/comments?postId=${postSelected?.id}`)\n        .then((response: unknown) => {\n          setComments(response as Comment[]);\n        })\n        .catch(() => {\n          setErrorComments('Error loading comments');\n        })\n        .finally(() => {\n          setIsLoadingComments(false);\n        });\n    }\n  }, [postSelected]);\n\n  const handleDeleteComment = (comment: Comment) => {\n    setCommentToDelete(comment);\n\n    if (comments) {\n      const newComments = comments\n        .filter(currComment => currComment.id !== comment.id);\n\n      setComments(newComments);\n    }\n  };\n\n  useEffect(() => {\n    client.delete(`/comments/${commentToDelete?.id}`)\n      .finally(() => {\n        setCommentToDelete(null);\n      });\n  }, [commentToDelete]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${postSelected?.id}: ${postSelected?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {postSelected?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {errorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorComments}\n            </div>\n          )}\n\n          {!comments?.length && !isLoadingComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          {comments?.length && !isLoadingComments && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {comments?.length && !isLoadingComments\n            && (comments?.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            )))}\n\n          {(!isLoadingComments && !showForm) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handlerFormOpener}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {(!isLoadingComments && showForm) && (\n          <NewCommentForm />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { useUserContext } from './Context/Context';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    setUsers,\n    showUsers,\n    setShowUsers,\n    setUserSelected,\n    setErrorUsers,\n  } = useUserContext();\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const [dropdownValue, setDropdownValue] = useState<string>('Choose a user');\n\n  const dropUsersList = () => {\n    setShowUsers(!showUsers);\n  };\n\n  const selectUser = (user: User) => {\n    setUserSelected(user);\n    setShowUsers(false);\n    setDropdownValue(user.name);\n  };\n\n  useEffect(() => {\n    client.get('/users')\n      .then((response: unknown) => {\n        setUsers(response as User[]);\n      })\n      .catch(() => {\n        setErrorUsers('Error loading users');\n      });\n  }, []);\n\n  useEffect(() => {\n    function handleClickOutside(event: Event) {\n      if (dropdownRef.current && !dropdownRef\n        .current.contains(event.target as Node)) {\n        setShowUsers(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={dropUsersList}\n        >\n          <span>{dropdownValue}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {showUsers && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          {users && (\n            <div className=\"dropdown-content\">\n              {users?.map(user => (\n                <a\n                  href={`#user-${user.id}`}\n                  className=\"dropdown-item\"\n                  key={user.id}\n                  onClick={() => selectUser(user)}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { useUserContext } from './components/Context/Context';\n\nexport const App: React.FC = () => {\n  const {\n    errorPosts,\n    userSelected,\n    posts,\n    isLoadingPosts,\n    postSelected,\n  } = useUserContext();\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userSelected && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {errorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorPosts}\n                  </div>\n                )}\n\n                {(!posts?.length\n                  && userSelected\n                  && !isLoadingPosts)\n                  && (\n                    // eslint-disable-next-line max-len\n                    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                      No posts yet\n                    </div>\n                  )}\n\n                <PostsList />\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': postSelected,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UserProvider } from './components/Context/Context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserProvider>\n      <App />\n    </UserProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}